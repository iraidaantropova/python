# 1. Реализовать класс Matrix (матрица).
# Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.

class Matrix:
    def __init__(self, list_1):
        self.list_1 = list_1

    def __str__(self):
        for row in self.list_1:
            for i in row:
                print(f"{i:4}", end="")
            print()
        return ''

    def __add__(self, other):
        for i in range(len(self.list_1)):
            for i_2 in range(len(other.list_1[i])):
                self.list_1[i][i_2] = self.list_1[i][i_2] + other.list_1[i][i_2]
        return Matrix.__str__(self)

matr = Matrix([[-5, 2, 1], [-4, 0, 3], [0, 4, 2], [1, 3, -4]])
new_matr = Matrix([[-1, 0, 2], [1, 4, 0], [0, 1, -1], [0, 0, -5]])
print(matr.__add__(new_matr))

# 2. Реализовать проект расчёта суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определённое название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
# Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2*H + 0.3).
# Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани.
# Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта,
# проверить на практике работу декоратора @property.

# Реализовать общий подсчет расхода ткани.
# Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта,
# проверить на практике работу декоратора @property.

from abc import ABC, abstractmethod

class Clothes(ABC):

    def __init__(self, parameter_cl):
        self.parameter_cl = parameter_cl

    @property
    @abstractmethod
    def fabric_consumption(self):
        return f'Общий расход ткани для пошива пальто и костюма составляет: {self.parameter_cl / 6.5 + 0.5 + 2 * self.parameter_cl + 0.3 :.2f}'

class Coat(Clothes):
    def fabric_consumption(self):
        return f'Для пошива пальто {self.parameter_cl} размера потребуется: {self.parameter_cl / 6.5 + 0.5 :.2f} метров ткани'

class Suit(Clothes):
    def fabric_consumption(self):
        return f'Для пошива костюма на рост {self.parameter_cl} м  нужно потратить: {2 * self.parameter_cl + 0.3 :.2f} метров ткани'

Coat = Coat(44)
Suit = Suit(1.77)
print(Coat.fabric_consumption())
print(Suit.fabric_consumption())

# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:

    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __add__(self, other):
        return f'Результат сложения клеток равен: {self.quantity + other.quantity}'

    def __sub__(self, other):
        sub = self.quantity - other.quantity
        return f'Результат вычитания равен: {sub} ' if sub > 0 else 'Отрицательно!'

    def __truediv__(self, other):
        return f'Результат деления равен: {self.quantity // other.quantity}'

    def __mul__(self, other):
        return f'Результат умножения равен: {self.quantity * other.quantity}'

    def make_order(self, cells_in_row):
        res = ''
        for i in range(int(self.quantity / cells_in_row)):
            res += f'{"*" * cells_in_row} \\n'
        res += f'{"*" * (self.quantity % cells_in_row)}'
        return res

cell = Cell(36)
cell_2 = Cell(8)
print(cell + cell_2)
print(cell - cell_2)
print(cell / cell_2)
print(cell * cell_2)
print(cell.make_order(21))
