# 1. Создать программный файл в текстовом формате, записать в него построчно данные, вводимые пользователем.
# Об окончании ввода данных будет свидетельствовать пустая строка.

my_file = open("my_file.txt", 'w', encoding='utf-8')
data = input('Введите текст: \n')
while data:
    my_file.writelines(data)
    data = input('Введите текст \n')
    if data == '':
        break
my_file.close()

# 2. Создать текстовый файл (не программно), сохранить в нём несколько строк,
# выполнить подсчёт строк и слов в каждой строке.

my_f = open('stroki.txt', 'r', encoding='utf-8')
content = my_f.readlines()
print(f'Количество строк в файле - {len(content)}')
for i in range(len(content)):
     print(f'Количество символов {i + 1} - ой строки {len(content[i])}')
my_f = open('stroki.txt', 'r', encoding='utf-8')
content = my_f.read()
content = content.split()
print(f'Общее количество слов - {len(content)}')
my_f.close()

# 3. Создать текстовый файл (не программно).
# Построчно записать фамилии сотрудников и величину их окладов (не менее 10 строк).
# Определить, кто из сотрудников имеет оклад менее 20 тысяч, вывести фамилии этих сотрудников.
# Выполнить подсчёт средней величины дохода сотрудников.
# Пример файла:
# Иванов 23543.12
# Петров 13749.32

def workers_statistics():
    workers = [['Иванов ', '125486 \n'], ['Петров ', '1436.12 \n'], ['Петров ', '526134.55 \n'], ['Макеев ', '4515.44 \n'], ['Бакин ', '45986.11 \n'], ['Романенко ', '458914.12 \n'], ['Лисин ', '785467.73 \n'], ['Маркусье ', '6236.01 \n'], ['Мяушев ', '32473426.99 \n'], ['Головин ', '134734.10 \n']]
    try:
        with open('staff.txt', 'r+', encoding="utf-8") as file:
            for i in range(len(workers)):
                file.writelines(workers[i])
            l = file.readlines()
            poor = []
            sum = 0
            for i in range(len(l)):
                salary = float((l[i].split())[1])
                if salary < 20000:
                    poor.append((l[i].split())[0])
                sum += salary
            print(f'Средняя величина дохода сотрудников равна {sum / len(workers) / 12:.2f}')
            print(f'Меньше 20 тыс. рублей получает сотрудник: {", ".join(poor)}')
    except FileNotFoundError:
        return 'Файл не найден.'
workers_statistics()

# 4. Создать (не программно) текстовый файл со следующим содержимым:
# One — 1
# Two — 2
# Three — 3
# Four — 4
# Напишите программу, открывающую файл на чтение и считывающую построчно данные.
# При этом английские числительные должны заменяться на русские.
# Новый блок строк должен записываться в новый текстовый файл.

numbers = {'One': 'Один', 'Two': 'Два', 'Three': 'Три', 'Four': 'Четыре'}
new_file = []
with open('task4.txt', 'r', encoding='utf-8') as file_obj:
     for i in file_obj:
         i = i.split(' ', 1)
         new_file.append(numbers[i[0]] + '  ' + i[1])
     print(new_file)

with open('task4_new.txt', 'w', encoding='utf-8') as file_obj_2:
    file_obj_2.writelines(new_file)

# 5. Создать (программно) текстовый файл, записать в него программно набор чисел, разделённых пробелами.
# Программа должна подсчитывать сумму чисел в файле и выводить её на экран.

import random

with open('numbers.txt', 'w', encoding='UTF-8') as file:
    whitespace = ''
    for i in range(3):
        file.write(whitespace + str(random.randint(0, 10)))
        whitespace = ' '

with open('numbers.txt', 'r', encoding='UTF-8') as file:
    numbers_str = file.read()
    numbers_list = numbers_str.split(' ')
    print(f"Набор чисел:\n{numbers_str}")
    print(f"Сумма чисел:\n{sum([int(i) for i in numbers_list])}")

# 6. Сформировать (не программно) текстовый файл. В нём каждая строка должна описывать учебный предмет и наличие лекционных, практических и лабораторных занятий по предмету.
# Сюда должно входить и количество занятий. Необязательно, чтобы для каждого предмета были все типы занятий.
# Сформировать словарь, содержащий название предмета и общее количество занятий по нему. Вывести его на экран.
# Примеры строк файла: Информатика: 100(л) 50(пр) 20(лаб).
# Физика: 30(л) — 10(лаб)
# Физкультура: — 30(пр) —
# Пример словаря: {“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}

try:
    with open("task6.txt", "r", encoding='utf-8') as file:
        res_dict = {}
        all_read_lines = file.readlines()
        for line in all_read_lines:
            if len(line):
                subject = line.split()
                hours_sum = 0
                for hours in subject[1:]:
                    if len(hours) > 1:
                        hours_sum += int(hours.split('(')[0])
                res_dict[subject[0]] = hours_sum
        print(f"{res_dict}\n")
except IOError:
    print("Ошибка открытия файла!\n")

# 7. Создать вручную и заполнить несколькими строками текстовый файл, в котором каждая строка будет содержать данные о фирме: название, форма собственности, выручка, издержки.
# Пример строки файла: firm_1 ООО 10000 5000.
#
# Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль. Если фирма получила убытки, в расчёт средней прибыли её не включать.
# Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а также словарь со средней прибылью. Если фирма получила убытки, также добавить её в словарь (со значением убытков).
# Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
#
# Итоговый список сохранить в виде json-объекта в соответствующий файл.
# Пример json-объекта:
# [{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]
# Подсказка: использовать менеджер контекста.

import json

report = []
with open('task7.txt', 'r', encoding='UTF-8') as file:
    text = file.read()
    file.seek(0)
    profits = {}
    profit_sum = 0
    for row in file:
        items = row.split(' ')
        profit = int(items[2]) - int(items[3])
        if profit > 0:
            profits.update({items[0]: profit})
            profit_sum += profit
    report.append(profits)
    report.append({'average_profit': (profit_sum / len(profits))})

with open('task7.json.txt', 'w', encoding='UTF-8') as json_file:
    json.dump(report, json_file, ensure_ascii=False)

json_report = json.dumps(report, ensure_ascii=False)

print(f"Исходный файл:\n{text}\n")
print(f"Список:\n{report}\n")
print(f"json-объект:\n{json_report}")
